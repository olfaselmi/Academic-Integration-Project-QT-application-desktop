void Smart_Transport::on_ajoutcadeau_clicked()
{
   int id,prix,point;
   QString type;
   id = ui->code->text().toInt();
   type = ui->type->text();
   prix = ui->prix->text().toInt();
   point = ui->point->text().toInt();
   cadeau c(id,type,prix,point);
   bool text = c.ajouter();
   if(text)
   {
       QMessageBox::information(nullptr, QObject::tr("gestion"),
                   QObject::tr("operation reussie.\n"
                               "Click Cancel to exit."), QMessageBox::Cancel);
       ui->tablecadeau->setModel(c.afficher());
   }
   else {
       QMessageBox::critical(nullptr, QObject::tr("gestion"),
                   QObject::tr("operation echec.\n"
                               "Click Cancel to exit."), QMessageBox::Cancel);
   }
}

void Smart_Transport::on_modicadeau_clicked()
{
    int id,prix,point;
    QString type;
    id = ui->code->text().toInt();
    type = ui->type->text();
    prix = ui->prix->text().toInt();
    point = ui->point->text().toInt();
    cadeau c(id,type,prix,point);
    bool text = c.modifier(id);
    if(text)
    {
        QMessageBox::information(nullptr, QObject::tr("gestion"),
                    QObject::tr("operation reussie.\n"
                                "Click Cancel to exit."), QMessageBox::Cancel);
        ui->tablecadeau->setModel(c.afficher());
    }
    else {
        QMessageBox::critical(nullptr, QObject::tr("gestion"),
                    QObject::tr("operation echec.\n"
                                "Click Cancel to exit."), QMessageBox::Cancel);
    }
}

void Smart_Transport::on_suppcadeau_clicked()
{
    int id;
    id =ui->cherchercadeau_3->text().toInt();
    cadeau c;
    bool text = c.supprimer(id);
    if(text)
    {
        QMessageBox::information(nullptr, QObject::tr("gestion"),
                    QObject::tr("operation reussie.\n"
                                "Click Cancel to exit."), QMessageBox::Cancel);
        ui->tablecadeau->setModel(c.afficher());
    }
    else {
        QMessageBox::critical(nullptr, QObject::tr("gestion"),
                    QObject::tr("operation echec.\n"
                                "Click Cancel to exit."), QMessageBox::Cancel);
    }
}

void Smart_Transport::on_cherchercadeau_2_clicked()
{
    int id;
    id =ui->cherchercadeau_3->text().toInt();
    QSqlQuery query;
    QString res = QString ::number(id);
    query.prepare("select *from cadeau where idcad = :id");
    query.bindValue(":id",res);
    bool text = query.exec();

    if(text)
    {
        while(query.next())
        {
            ui->code->setText(query.value(0).toString());
            ui->type->setText(query.value(1).toString());
            ui->prix->setText(query.value(2).toString());
            ui->point->setText(query.value(3).toString());
        }
       ui->cherchercadeau_3->setText("");
    }
}

void Smart_Transport::on_numero_client_rechireservation_2_textChanged(const QString &arg1)
{
    cadeau ca;
    ui->tableView_affirechercher_2->setModel(ca.afficher_avec_id(arg1));
}

.h
#ifndef CADEAU_H
#define CADEAU_H

#include <QString>
#include <QSqlQuery>
#include <QSqlQueryModel>
class cadeau
{
public:
    cadeau();
    cadeau(int,QString,int,int);
    bool ajouter();
    QSqlQueryModel * afficher();
    bool modifier(int);
    bool supprimer(int);
    QSqlQueryModel * afficher_avec_id(const QString &arg1);
private:
    int id,prix,point;
    QString type;
};

#endif // CADEAU_H



.cpp

#include "cadeau.h"
#include <QDebug>
#include <QVariant>

cadeau::cadeau()
{
 id=0;
 type="";
 prix=0;
 point = 0;
}
cadeau ::cadeau(int id,QString type,int prix,int point)
{
    this->id=id;
    this->type=type;
    this->prix=prix;
    this->point =point;
}
bool cadeau::ajouter()
{
    QSqlQuery query;
    QString res = QString::number(id);
    query.prepare("INSERT INTO cadeau (idcad,typecad, prixcad,pointcad) "
                        "VALUES (:id ,:type, :prix,  :point); ");
    query.bindValue(":id", res);
    query.bindValue(":type", type);
    query.bindValue(":prix", prix);
    query.bindValue(":point", point);


    return    query.exec();
}
QSqlQueryModel * cadeau::afficher()
{
    QSqlQueryModel * model= new QSqlQueryModel();

    model->setQuery("select * from cadeau ;");
    model->setHeaderData(0, Qt::Horizontal, QObject::tr("NUMERO"));
    model->setHeaderData(1, Qt::Horizontal, QObject::tr("TYPE"));
    model->setHeaderData(2, Qt::Horizontal, QObject::tr("PRIX "));
    model->setHeaderData(3, Qt::Horizontal, QObject::tr("POINT"));

        return model;
}
bool cadeau::modifier(int num)
{
    QSqlQuery query;
    QString res= QString::number(num);
    query.prepare("Update  cadeau set  idcad= :id,typecad= :type,prixcad= :prix,pointcad= :point where idcad = :id ");
    query.bindValue(":id", res);
    query.bindValue(":type", type);
    query.bindValue(":prix", prix);
    query.bindValue(":point", point);

    return  query.exec();

}
bool cadeau::supprimer(int num)
{
    QSqlQuery query;
    QString res= QString::number(num);
    query.prepare("Delete from cadeau where idcad = :id ");
    query.bindValue(":id", res);
    return    query.exec();
}
QSqlQueryModel * cadeau::afficher_avec_id(const QString &arg1)
{
    QSqlQueryModel * model = new QSqlQueryModel() ;
    QSqlQuery query;
    query.prepare("select * from cadeau where idcad like '%"+arg1+"%' ");
    query.addBindValue(arg1);
    query.exec();
    model->setQuery(query);
    model->setHeaderData(0, Qt::Horizontal, QObject::tr("NUMERO"));
    model->setHeaderData(1, Qt::Horizontal, QObject::tr("TYPE"));
    model->setHeaderData(2, Qt::Horizontal, QObject::tr("PRIX "));
    model->setHeaderData(3, Qt::Horizontal, QObject::tr("POINT"));

        return model;
}


commandes 
create table cadeau
(
idcad number(20) not null constraint pk_cadeau primary key,
typecad varchar2(20) not null,
prixcad number(10) not null,
pointcad number(10) not null
)